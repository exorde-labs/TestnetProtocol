// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.8;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";


/**
 * @title Crowdsale
 * @dev Crowdsale is a base contract for managing a token crowdsale,
 * allowing investors to purchase tokens with dollar. This contract implements
 * such functionality in its most fundamental form and can be extended to provide additional
 * functionality and/or custom behavior.
 * The external interface represents the basic interface for purchasing tokens, and conforms
 * the base architecture for crowdsales. It is *not* intended to be modified / overridden.
 * The internal interface conforms the extensible and modifiable surface of crowdsales. Override
 * the methods to add functionality. Consider using 'super' where appropriate to concatenate
 * behavior.
 */
contract Crowdsale is Context, ReentrancyGuard, Ownable, Pausable {
    using SafeERC20 for IERC20;

    // The token being sold
    IERC20 private _token;

    IERC20 public USDC;
    IERC20 public USDT;
    IERC20 public DAI;

    uint256 public USDC_decimal_count = 6;
    uint256 public USDT_decimal_count = 6;
    uint256 public DAI_decimal_count = 18;

    // Address where funds are collected
    address payable private _wallet;

    // How many token units a buyer gets per dollar.
    // The rate is the conversion between dollar and the smallest and indivisible token unit.
    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK
    // 1 dollar will give you 1 unit, or 0.001 TOK.

    // The EXD Token Sale is Tiered
    //      Tier 1 = $0.35/EXD for the first 2 million (2 000 000) EXD tokens sold, then
    //      Tier 2 = $0.375/EXD for 4 million (4 000 000) EXD tokens sold, then
    //      Tier 3 = $0.40/EXD for the last 6 million (6 000 000) EXD tokens sold.
    // ------ Total EXD told (to be deposited in contract initially) = 12 000 000 EXD tokens. Twelve millions.
    // Requirements of the sale
    //      A. All buyers must be whitelisted by Exorde Labs, according to their KYC verification done on exorde.network
    //      B. All buyers are limited to $50k (50 000), 
    //          fifty thousand dollars of purchase, overall (they can buy multiple times).
    //      C. A tier ends when all tokens have been sold. 
    //      D. If token remain unsold after a period of 1 month, 
    //          the owner of the contract can withdraw the remaining tokens.
    //      E. Buyers get the EXD token instantly when buying.

    uint256 public _rate1 = 1*(10**18)/0.35;    // Tier 1 = $0.35/EXD
    uint256 public _rate2 = 1*(10**18)/0.375;   // Tier 2 = $0.375/EXD
    uint256 public _rate3 = 1*(10**18)/0.4;     // Tier 3 = $0.40/EXD

    uint256 public startTime;
    uint256 public endTime;

   // You can only buy up to 12M tokens
   uint256 public constant maxTokensSold = 12*(10**6)*(10**18); // 12 000 000 EXD

   // You can only buy up to 12M tokens
   uint256 public constant maxDollarPurchasedPerUser = 50000; // 50 000 dollars ($50k)

    // Amount of dollar raised
    uint256 public _dollarRaised;

    // Amount of token sold
    uint256 public tokensRaised;

    mapping(address => uint256) private tokenRaisedPerAddress;

    /**
     * Event for token purchase logging
     * @param purchaser who paid for the tokens
     * @param beneficiary who got the tokens
     * @param value dollars paid for purchase
     * @param amount amount of tokens purchased
     */
    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);

    /// @notice Allow to extend ICO end date
    /// @param _endTime Endtime of ICO
    function setEndDate(uint256 _endTime)
        external onlyOwner whenNotPaused
    {
        require(now <= _endTime);
        require(startTime < _endTime);
        
        endTime = _endTime;
    }

    
    /**
     * @param rate_ Number of token units a buyer gets per dollar
     * @dev The rate is the conversion between dollar and the smallest and indivisible
     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token
     * with 3 decimals called TOK, 1 dollar will give you 1 unit, or 0.001 TOK.
     * @param wallet_ Address where collected funds will be forwarded to
     * @param token_ Address of the token being sold
     */
    constructor (uint256 rate_, address payable wallet_,  uint256 startTime_, uint256 endTime_, 
    IERC20 token_, IERC20 USDC_, IERC20 USDT_, IERC20 DAI_) {
        require(rate_ > 0, "Crowdsale: rate is 0");
        require(wallet_ != address(0), "Crowdsale: wallet is the zero address");
        require(address(token_) != address(0), "Crowdsale: token is the zero address");
        require(now <= _endTime, "endTime must be in the future");
        require(startTime < _endTime, "startTime must be < _endTime");
        startTime = startTime_;
        endTime = endTime_;

        USDC = IERC20(USDC_);
        USDT = IERC20(USDT_);
        DAI = IERC20(DAI_);

        _rate = rate_;
        _wallet = wallet_;
        _token = token_;
    }

    //  ----------- WHITELISTING - KYC/AML -----------
        
    mapping(address => bool) public whitelist;

    /**
    * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.
    */
    modifier isWhitelisted(address _beneficiary) {
        require(whitelist[_beneficiary]);
        _;
    }

    /**
    * @dev Adds single address to whitelist.
    * @param _beneficiary Address to be added to the whitelist
    */
    function addToWhitelist(address _beneficiary) external onlyOwner {
        whitelist[_beneficiary] = true;
    }

    /**
    * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.
    * @param _beneficiaries Addresses to be added to the whitelist
    */
    function addManyToWhitelist(address[] memory _beneficiaries) external onlyOwner {
        for (uint256 i = 0; i < _beneficiaries.length; i++) {
        whitelist[_beneficiaries[i]] = true;
        }
    }

    /**
    * @dev Removes single address from whitelist.
    * @param _beneficiary Address to be removed to the whitelist
    */
    function removeFromWhitelist(address _beneficiary) external onlyOwner {
        whitelist[_beneficiary] = false;
    }

    //  ----------------------------------------------

    /**
     * @dev fallback function ***DO NOT OVERRIDE***
     * THIS CONTRACT DOES NOT ACCEPT ETHER
     */
    receive () external payable {
        revert("ETH not authorized, please use buyTokens()");
    }

    /**
     * @return the token being sold.
     */
    function token() public view returns (IERC20) {
        return _token;
    }

    /**
     * @return the address where funds are collected.
     */
    function wallet() public view returns (address payable) {
        return _wallet;
    }

    /**
     * @return the number of token units a buyer gets per dollar.
     */
    function rate() public view returns (uint256) {
        return _rate;
    }

    /**
     * @return the amount of dollar raised.
     */
    function dollarRaised() public view returns (uint256) {
        return _dollarRaised;
    }

    /**
     * @dev low level token purchase ***DO NOT OVERRIDE***
     * This function has a non-reentrancy guard, so it shouldn't be called by
     * another `nonReentrant` function.
     * @param beneficiary Recipient of the token purchase
     * @param purchaseAmount in dollar (usdc/usdt/dai)
     */
    function buyTokensUSDC(address beneficiary, uint256 purchaseAmount) public 
    nonReentrant 
    isWhitelisted(beneficiary) 
    {
        require(USDC.safeTransferFrom(_msgSender(), address(this), purchaseAmount), "token transfer failed");
        
        _preValidatePurchase(beneficiary, purchaseAmount);

        // calculate token amount to be created
        uint256 tokens = _getTokenAmount(purchaseAmount);

        // update state
        _dollarRaised = _dollarRaised.add(purchaseAmount);

        _processPurchase(beneficiary, tokens);
        emit TokensPurchased(_msgSender(), beneficiary, purchaseAmount, tokens);

        _updatePurchasingState(beneficiary, purchaseAmount);

        _forwardFunds(USDC, purchaseAmount);
        // _postValidatePurchase(beneficiary, purchaseAmount);
    }


    /**
     * @dev low level token purchase ***DO NOT OVERRIDE***
     * This function has a non-reentrancy guard, so it shouldn't be called by
     * another `nonReentrant` function.
     * @param beneficiary Recipient of the token purchase
     * @param purchaseAmount in dollar (usdc/usdt/dai)
     */
    function buyTokensUSDT(address beneficiary, uint256 purchaseAmount) public 
    nonReentrant 
    isWhitelisted(beneficiary) 
    {
        require(USDT.safeTransferFrom(_msgSender(), address(this), purchaseAmount), "token transfer failed");
        
        _preValidatePurchase(beneficiary, purchaseAmount);

        // calculate token amount to be created
        uint256 tokens = _getTokenAmount(purchaseAmount);

        // update state
        _dollarRaised = _dollarRaised.add(purchaseAmount);

        _processPurchase(beneficiary, tokens);
        emit TokensPurchased(_msgSender(), beneficiary, purchaseAmount, tokens);

        _updatePurchasingState(beneficiary, purchaseAmount);

        _forwardFunds(USDT, purchaseAmount);
        // _postValidatePurchase(beneficiary, purchaseAmount);
    }


    /**
     * @dev low level token purchase ***DO NOT OVERRIDE***
     * This function has a non-reentrancy guard, so it shouldn't be called by
     * another `nonReentrant` function.
     * @param beneficiary Recipient of the token purchase
     * @param purchaseAmount in dollar (usdc/usdt/dai)
     */
    function buyTokensDAI(address beneficiary, uint256 purchaseAmount) public 
    nonReentrant 
    isWhitelisted(beneficiary) 
    payable {
        require(DAI.safeTransferFrom(_msgSender(), address(this), purchaseAmount), "token transfer failed");
        
        _preValidatePurchase(beneficiary, purchaseAmount);

        // calculate token amount to be created
        uint256 tokens = _getTokenAmount(purchaseAmount);

        // update state
        _dollarRaised = _dollarRaised.add(purchaseAmount);

        _processPurchase(beneficiary, tokens);
        emit TokensPurchased(_msgSender(), beneficiary, purchaseAmount, tokens);

        _updatePurchasingState(beneficiary, purchaseAmount);

        _forwardFunds(DAI, purchaseAmount);
        // _postValidatePurchase(beneficiary, purchaseAmount);
    }



    /**
     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.
     * Use `super` in contracts that inherit from Crowdsale to extend their validations.
     * Example from CappedCrowdsale.sol's _preValidatePurchase method:
     *     super._preValidatePurchase(beneficiary, dollarAmount);
     *     require(dollarRaised().add(dollarAmount) <= cap);
     * @param beneficiary Address performing the token purchase
     * @param dollarAmount Value in dollar involved in the purchase
     */
    function _preValidatePurchase(address beneficiary, uint256 dollarAmount) internal view virtual {
        require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");
        require(dollarAmount != 0, "Crowdsale: dollarAmount is 0");
        require((tokenRaisedPerAddress[beneficiary] + dollarAmount) <= maxDollarPurchasedPerUser, "The max total purchase (cumulated) by user is $50k.");
    }

    // /**
    //  * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid
    //  * conditions are not met.
    //  * @param beneficiary Address performing the token purchase
    //  * @param dollarAmount Value in dollar involved in the purchase
    //  */
    // function _postValidatePurchase(address beneficiary, uint256 dollarAmount) internal view virtual {
    //     // solhint-disable-previous-line no-empty-blocks
    // }

    /**
     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends
     * its tokens.
     * @param beneficiary Address performing the token purchase
     * @param tokenAmount Number of tokens to be emitted
     */
    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal virtual {
        _token.safeTransfer(beneficiary, tokenAmount);
    }

    /**
     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send
     * tokens.
     * @param beneficiary Address receiving the tokens
     * @param tokenAmount Number of tokens to be purchased
     */
    function _processPurchase(address beneficiary, uint256 tokenAmount) internal virtual {
        _deliverTokens(beneficiary, _processPurchase);
        _tokenSold += _processPurchase;
    }

    /**
     * @dev Override for extensions that require an internal state to check for validity (current user contributions,
     * etc.)
     * @param beneficiary Address receiving the tokens
     * @param dollarAmount Value in dollar involved in the purchase
     */
    function _updatePurchasingState(address beneficiary, uint256 dollarAmount) internal virtual {
        // solhint-disable-previous-line no-empty-blocks
        tokenRaisedPerAddress[beneficiary] += dollarAmount;
    }


   function calculateExcessBalance(uint256 purchaseAmount) internal whenNotPaused returns(uint256) {
      uint256 amountPaid = purchaseAmount;
      uint256 differenceWei = 0;
      uint256 exceedingBalance = 0;

      // If we're in the last tier, check that the limit hasn't been reached
      // and if so, refund the difference and return what will be used to
      // buy the remaining tokens
      if(tokensRaised >= limitTier3) {
         uint256 addedTokens = tokensRaised.add(amountPaid.mul(rateTier4));

         // If tokensRaised + what you paid converted to tokens is bigger than the max
         if(addedTokens > maxTokensRaised) {

            // Refund the difference
            uint256 difference = addedTokens.sub(maxTokensRaised);
            differenceWei = difference.div(rateTier4);
            amountPaid = amountPaid.sub(differenceWei);
         }
      }

      uint256 addedBalance = crowdsaleBalances[msg.sender].add(amountPaid);

      // Checking that the individual limit of 1000 ETH per user is not reached
      if(addedBalance <= maxPurchase) {
         crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(amountPaid);
      } else {

         // Substracting 1000 ether in wei
         exceedingBalance = addedBalance.sub(maxPurchase);
         amountPaid = amountPaid.sub(exceedingBalance);

         // Add that balance to the balances
         crowdsaleBalances[msg.sender] = crowdsaleBalances[msg.sender].add(amountPaid);
      }

      // Make the transfers at the end of the function for security purposes
      if(differenceWei > 0)
         msg.sender.transfer(differenceWei);

      if(exceedingBalance > 0) {

         // Return the exceeding balance to the buyer
         msg.sender.transfer(exceedingBalance);
      }

      return amountPaid;
   }


   /// @notice To buy tokens given an address
   function buyTokens() public payable whenNotPaused {
      require(validPurchase());

      uint256 tokens = 0;
      
      uint256 amountPaid = calculateExcessBalance();

      if(tokensRaised < limitTier1) {

         // Tier 1
         tokens = amountPaid.mul(rate);

         // If the amount of tokens that you want to buy gets out of this tier
         if(tokensRaised.add(tokens) > limitTier1)
            tokens = calculateExcessTokens(amountPaid, limitTier1, 1, rate);
      } else if(tokensRaised >= limitTier1 && tokensRaised < limitTier2) {

         // Tier 2
         tokens = amountPaid.mul(rateTier2);

         // If the amount of tokens that you want to buy gets out of this tier
         if(tokensRaised.add(tokens) > limitTier2)
            tokens = calculateExcessTokens(amountPaid, limitTier2, 2, rateTier2);
      } else if(tokensRaised >= limitTier2 && tokensRaised < limitTier3) {

         // Tier 3
         tokens = amountPaid.mul(rateTier3);

         // If the amount of tokens that you want to buy gets out of this tier
         if(tokensRaised.add(tokens) > limitTier3)
            tokens = calculateExcessTokens(amountPaid, limitTier3, 3, rateTier3);
      } else if(tokensRaised >= limitTier3) {

         // Tier 4
         tokens = amountPaid.mul(rateTier4);
      }

      weiRaised = weiRaised.add(amountPaid);
      uint256 tokensRaisedBeforeThisTransaction = tokensRaised;
      tokensRaised = tokensRaised.add(tokens);
      token.distributeICOTokens(msg.sender, tokens);

      // Keep a record of how many tokens everybody gets in case we need to do refunds
      tokensBought[msg.sender] = tokensBought[msg.sender].add(tokens);
      TokenPurchase(msg.sender, amountPaid, tokens);
      numberOfTransactions = numberOfTransactions.add(1);

      if(tokensRaisedBeforeThisTransaction > minimumGoal) {

         walletB.transfer(amountPaid);

      } else {
         vault.deposit.value(amountPaid)(msg.sender);
         if(goalReached()) {
          vault.close();
         }
         
      }

   }

    /// @notice Buys the tokens for the specified tier and for the next one
    /// @param amount The amount of dollar paid to buy the tokens
    /// @param tokensThisTier The limit of tokens of that tier
    /// @param tierSelected The tier selected
    /// @param _rate The rate used for that `tierSelected`
    /// @return uint The total amount of tokens bought combining the tier prices
   function calculateExcessTokens(
        IERC20 paymentToken,
        uint256 amount,
        uint256 tokensThisTier,
        uint256 tierSelected,
        uint256 _rate
   ) public returns(uint256 totalTokens) {
      require(amount > 0 && tokensThisTier > 0 && _rate > 0);
      require(tierSelected >= 1 && tierSelected <= 4);

      uint dollarThisTier = tokensThisTier.sub(tokensRaised).div(_rate);
      uint dollarNextTier = amount.sub(dollarThisTier);
      uint tokensNextTier = 0;
      bool returnTokens = false;

      // If there's excessive dollar for the last tier, refund those
      if(tierSelected != 3)
         tokensNextTier = calculateTokensTier(dollarNextTier, tierSelected.add(1));
      else
         returnTokens = true;

      totalTokens = tokensThisTier.sub(tokensRaised).add(tokensNextTier);

      // Do the transfer at the end
      if(returnTokens){
        paymentToken.transfer(_msgSender(), dollarNextTier);
      }
      return totalTokens;
   }


   /// @notice Buys the tokens given the price of the tier and the dollar paid
   /// @param dollarPaid The amount of dollar paid that will be used to buy tokens
   /// @param tierSelected The tier that you'll use for thir purchase
   /// @return calculatedTokens Returns how many tokens you've bought for that dollar paid
   
   function calculateTokensTier(uint256 dollarPaid, uint256 tierSelected)
        internal  returns(uint256 calculatedTokens)
   {
      require(dollarPaid > 0);
      require(tierSelected >= 1 && tierSelected <= 4);

      if(tierSelected == 1)
         calculatedTokens = dollarPaid.mul(rate);
      else if(tierSelected == 2)
         calculatedTokens = dollarPaid.mul(rateTier2);
      else if(tierSelected == 3)
         calculatedTokens = dollarPaid.mul(rateTier3);
      else
         calculatedTokens = dollarPaid.mul(rateTier4);
   }




   /// @notice Checks if a purchase is considered valid
   /// @return bool If the purchase is valid or not
   function validPurchase() internal  returns(bool) {
      bool withinPeriod = now >= startTime && now <= endTime;
      bool nonZeroPurchase = msg.value > 0;
      bool withinTokenLimit = tokensRaised < maxTokensRaised;
      bool minimumPurchase = msg.value >= minPurchase;
      bool hasBalanceAvailable = crowdsaleBalances[msg.sender] < maxPurchase;

      // We want to limit the gas to avoid giving priority to the biggest paying contributors
      //bool limitGas = tx.gasprice <= limitGasPrice;

      return withinPeriod && nonZeroPurchase && withinTokenLimit && minimumPurchase && hasBalanceAvailable;
   }
   
   /// @notice Public function to check if the crowdsale has ended or not
   function hasEnded() public  returns(bool) {
      return now > endTime || tokensRaised >= maxTokensRaised;
   }

    /**
     * @dev Override to extend the way in which dollar is converted to tokens.
     * @param dollarAmount Value in dollar to be converted into tokens
     * @return Number of tokens that can be purchased with the specified _dollarAmount
     */
    function _getTokenAmount(uint256 dollarAmount) internal view returns (uint256) {
        return dollarAmount.mul(_rate);
    }

    /**
     * @dev Determines how ETH is stored/forwarded on purchases.
     */
    function _forwardFunds(IERC20 inputToken_, uint256 amount_) internal virtual {
        inputToken_.safeTransfer( _wallet, amount_  );
    }
}